import 'package:flutter/material.dart';
import 'package:table_calendar/table_calendar.dart';
import 'package:intl/intl.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:printing/printing.dart';
import 'maintenance_schedule_model.dart';
import 'add_maintenance_screen.dart';
import 'maintenance_filter_dialog.dart';

class MaintenanceCalendarScreen extends StatefulWidget {
  const MaintenanceCalendarScreen({Key? key}) : super(key: key);

  @override
  _MaintenanceCalendarScreenState createState() => _MaintenanceCalendarScreenState();
}

class _MaintenanceCalendarScreenState extends State<MaintenanceCalendarScreen> {
  late final ValueNotifier<List<MaintenanceSchedule>> _selectedEvents;
  CalendarFormat _calendarFormat = CalendarFormat.month;
  RangeSelectionMode _rangeSelectionMode = RangeSelectionMode.toggledOff;
  DateTime _focusedDay = DateTime.now();
  DateTime? _selectedDay;
  DateTime? _rangeStart;
  DateTime? _rangeEnd;
  
  // Simulaci√≥n de datos - en producci√≥n esto vendr√≠a de Firebase
  Map<DateTime, List<MaintenanceSchedule>> _events = {};
  List<MaintenanceSchedule> _allMaintenances = [];
  
  String _filterStatus = 'all';
  String _filterTechnician = 'all';
  String _filterClient = 'all';

  @override
  void initState() {
    super.initState();
    _selectedDay = DateTime.now();
    _selectedEvents = ValueNotifier(_getEventsForDay(_selectedDay!));
    _loadMaintenances();
  }

  @override
  void dispose() {
    _selectedEvents.dispose();
    super.dispose();
  }

  void _loadMaintenances() {
    // Simulaci√≥n de datos - aqu√≠ cargar√≠as desde Firebase
    _allMaintenances = _generateSampleMaintenances();
    _updateEventsMap();
  }

  void _updateEventsMap() {
    _events.clear();
    for (var maintenance in _allMaintenances) {
      final date = DateTime(
        maintenance.scheduledDate.year,
        maintenance.scheduledDate.month,
        maintenance.scheduledDate.day,
      );
      
      if (_events[date] != null) {
        _events[date]!.add(maintenance);
      } else {
        _events[date] = [maintenance];
      }
    }
    
    if (_selectedDay != null) {
      _selectedEvents.value = _getEventsForDay(_selectedDay!);
    }
    setState(() {});
  }

  List<MaintenanceSchedule> _getEventsForDay(DateTime day) {
    final normalizedDay = DateTime(day.year, day.month, day.day);
    return _events[normalizedDay] ?? [];
  }

  List<MaintenanceSchedule> _getEventsForRange(DateTime start, DateTime end) {
    final days = _daysInRange(start, end);
    return [
      for (final d in days) ..._getEventsForDay(d),
    ];
  }

  List<DateTime> _daysInRange(DateTime start, DateTime end) {
    int dayCount = end.difference(start).inDays + 1;
    return List.generate(
      dayCount,
      (index) => DateTime(start.year, start.month, start.day + index),
    );
  }

  void _onDaySelected(DateTime selectedDay, DateTime focusedDay) {
    if (!isSameDay(_selectedDay, selectedDay)) {
      setState(() {
        _selectedDay = selectedDay;
        _focusedDay = focusedDay;
        _rangeStart = null;
        _rangeEnd = null;
        _rangeSelectionMode = RangeSelectionMode.toggledOff;
      });

      _selectedEvents.value = _getEventsForDay(selectedDay);
    }
  }

  void _onRangeSelected(DateTime? start, DateTime? end, DateTime focusedDay) {
    setState(() {
      _selectedDay = null;
      _focusedDay = focusedDay;
      _rangeStart = start;
      _rangeEnd = end;
      _rangeSelectionMode = RangeSelectionMode.toggledOn;
    });

    if (start != null && end != null) {
      _selectedEvents.value = _getEventsForRange(start, end);
    } else if (start != null) {
      _selectedEvents.value = _getEventsForDay(start);
    } else {
      _selectedEvents.value = [];
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Calendario de Mantenimientos'),
        backgroundColor: const Color(0xFF2196F3),
        foregroundColor: Colors.white,
        actions: [
          IconButton(
            icon: const Icon(Icons.filter_list),
            onPressed: _showFilterDialog,
          ),
          IconButton(
            icon: const Icon(Icons.add),
            onPressed: () => _showAddMaintenanceDialog(),
          ),
        ],
      ),
      body: Column(
        children: [
          _buildCalendarHeader(),
          _buildTableCalendar(),
          const SizedBox(height: 8.0),
          Expanded(
            child: ValueListenableBuilder<List<MaintenanceSchedule>>(
              valueListenable: _selectedEvents,
              builder: (context, value, _) {
                return _buildEventsList(value);
              },
            ),
          ),
        ],
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () => _showAddMaintenanceDialog(),
        backgroundColor: const Color(0xFF2196F3),
        child: const Icon(Icons.add, color: Colors.white),
      ),
    );
  }

  Widget _buildCalendarHeader() {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.1),
            spreadRadius: 1,
            blurRadius: 3,
            offset: const Offset(0, 1),
          ),
        ],
      ),
      padding: const EdgeInsets.all(16.0),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            DateFormat('MMMM yyyy', 'es').format(_focusedDay),
            style: const TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
            ),
          ),
          Row(
            children: [
              IconButton(
                icon: const Icon(Icons.chevron_left),
                onPressed: () {
                  setState(() {
                    _focusedDay = DateTime(_focusedDay.year, _focusedDay.month - 1);
                  });
                },
              ),
              TextButton(
                onPressed: () {
                  setState(() {
                    _focusedDay = DateTime.now();
                    _selectedDay = DateTime.now();
                    _selectedEvents.value = _getEventsForDay(_selectedDay!);
                  });
                },
                child: const Text('Hoy'),
              ),
              IconButton(
                icon: const Icon(Icons.chevron_right),
                onPressed: () {
                  setState(() {
                    _focusedDay = DateTime(_focusedDay.year, _focusedDay.month + 1);
                  });
                },
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildTableCalendar() {
    return TableCalendar<MaintenanceSchedule>(
      firstDay: DateTime.utc(2020, 1, 1),
      lastDay: DateTime.utc(2030, 12, 31),
      focusedDay: _focusedDay,
      calendarFormat: _calendarFormat,
      eventLoader: _getEventsForDay,
      rangeSelectionMode: _rangeSelectionMode,
      selectedDayPredicate: (day) {
        return isSameDay(_selectedDay, day);
      },
      rangeStartDay: _rangeStart,
      rangeEndDay: _rangeEnd,
      onDaySelected: _onDaySelected,
      onRangeSelected: _onRangeSelected,
      onFormatChanged: (format) {
        if (_calendarFormat != format) {
          setState(() {
            _calendarFormat = format;
          });
        }
      },
      onPageChanged: (focusedDay) {
        _focusedDay = focusedDay;
      },
      calendarStyle: CalendarStyle(
        outsideDaysVisible: false,
        markersMaxCount: 3,
        markerDecoration: BoxDecoration(
          color: Colors.blue[400],
          shape: BoxShape.circle,
        ),
        selectedDecoration: const BoxDecoration(
          color: Color(0xFF2196F3),
          shape: BoxShape.circle,
        ),
        todayDecoration: BoxDecoration(
          color: Colors.blue[300],
          shape: BoxShape.circle,
        ),
        rangeHighlightColor: Colors.blue[100],
        rangeStartDecoration: const BoxDecoration(
          color: Color(0xFF2196F3),
          shape: BoxShape.circle,
        ),
        rangeEndDecoration: const BoxDecoration(
          color: Color(0xFF2196F3),
          shape: BoxShape.circle,
        ),
      ),
      calendarBuilders: CalendarBuilders(
        markerBuilder: (context, day, events) {
          if (events.isNotEmpty) {
            return Row(
              mainAxisSize: MainAxisSize.min,
              children: events.take(3).map((event) {
                return Container(
                  margin: const EdgeInsets.only(top: 5, right: 2),
                  width: 6,
                  height: 6,
                  decoration: BoxDecoration(
                    color: event.statusColor,
                    shape: BoxShape.circle,
                  ),
                );
              }).toList(),
            );
          }
          return null;
        },
      ),
      headerStyle: const HeaderStyle(
        formatButtonVisible: true,
        titleCentered: true,
        formatButtonShowsNext: false,
        formatButtonDecoration: BoxDecoration(
          color: Color(0xFF2196F3),
          borderRadius: BorderRadius.all(Radius.circular(12.0)),
        ),
        formatButtonTextStyle: TextStyle(
          color: Colors.white,
        ),
      ),
    );
  }

  Widget _buildEventsList(List<MaintenanceSchedule> events) {
    for (var event in events) {
    print('üîç Event: ${event.equipmentName}');
    print('üîç Status: ${event.status}');
    print('üîç Date: ${event.scheduledDate}');
  }
    print('Events count: ${events.length}');
    print('Selected day: $_selectedDay');
    
    if (events.isEmpty) {
      return const Center(
        child: Text(
          'No hay mantenimientos programados para esta fecha',
          style: TextStyle(color: Colors.grey, fontSize: 16),
        ),
      );
    }

    print('Should show PDF button'); // Debug
    
    return Column(
      children: [
        // Header con informaci√≥n del d√≠a y bot√≥n PDF
        Container(
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: Colors.white,
            boxShadow: [
              BoxShadow(
                color: Colors.grey.withOpacity(0.1),
                spreadRadius: 1,
                blurRadius: 3,
                offset: const Offset(0, 1),
              ),
            ],
          ),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    _selectedDay != null 
                      ? DateFormat('EEEE, dd MMMM yyyy', 'es').format(_selectedDay!)
                      : 'Rango seleccionado',
                    style: const TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  Text(
                    '${events.length} mantenimiento${events.length != 1 ? 's' : ''}',
                    style: TextStyle(
                      fontSize: 14,
                      color: Colors.grey[600],
                    ),
                  ),
                ],
              ),
              ElevatedButton.icon(
                onPressed: () => _generateDayReport(events),
                icon: const Icon(Icons.picture_as_pdf),
                label: const Text('Generar PDF'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.red[600],
                  foregroundColor: Colors.white,
                ),
              ),
            ],
          ),
        ),
        // Lista de mantenimientos
        Expanded(
          child: ListView.builder(
            itemCount: events.length,
            itemBuilder: (context, index) {
              return _buildMaintenanceCard(events[index]);
            },
          ),
        ),
      ],
    );
  }

  Widget _buildMaintenanceCard(MaintenanceSchedule maintenance) {
    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      child: InkWell(
        onTap: () => _showMaintenanceDetails(maintenance),
        borderRadius: BorderRadius.circular(8),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  Container(
                    padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                    decoration: BoxDecoration(
                      color: maintenance.statusColor.withOpacity(0.1),
                      borderRadius: BorderRadius.circular(12),
                      border: Border.all(color: maintenance.statusColor),
                    ),
                    child: Text(
                      maintenance.statusDisplayName,
                      style: TextStyle(
                        color: maintenance.statusColor,
                        fontWeight: FontWeight.bold,
                        fontSize: 12,
                      ),
                    ),
                  ),
                  const Spacer(),
                  Text(
                    DateFormat('HH:mm').format(maintenance.scheduledDate),
                    style: const TextStyle(fontWeight: FontWeight.bold),
                  ),
                ],
              ),
              const SizedBox(height: 8),
              Text(
                maintenance.equipmentName,
                style: const TextStyle(
                  fontWeight: FontWeight.bold,
                  fontSize: 16,
                ),
              ),
              Text(
                maintenance.clientName,
                style: const TextStyle(color: Colors.grey),
              ),
              if (maintenance.technicianName != null) ...[
                const SizedBox(height: 4),
                Row(
                  children: [
                    const Icon(Icons.person, size: 16, color: Colors.grey),
                    const SizedBox(width: 4),
                    Text(
                      maintenance.technicianName!,
                      style: const TextStyle(color: Colors.grey),
                    ),
                  ],
                ),
              ],
              if (maintenance.location != null) ...[
                const SizedBox(height: 4),
                Row(
                  children: [
                    const Icon(Icons.location_on, size: 16, color: Colors.grey),
                    const SizedBox(width: 4),
                    Expanded(
                      child: Text(
                        maintenance.location!,
                        style: const TextStyle(color: Colors.grey),
                        overflow: TextOverflow.ellipsis,
                      ),
                    ),
                  ],
                ),
              ],
              const SizedBox(height: 8),
              Row(
                children: [
                  Chip(
                    label: Text(maintenance.frequencyDisplayName),
                    backgroundColor: Colors.blue[50],
                    labelStyle: const TextStyle(fontSize: 12),
                  ),
                  const SizedBox(width: 8),
                  Chip(
                    label: Text('${maintenance.estimatedDurationMinutes} min'),
                    backgroundColor: Colors.green[50],
                    labelStyle: const TextStyle(fontSize: 12),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _showFilterDialog() {
    showDialog(
      context: context,
      builder: (context) => MaintenanceFilterDialog(
        selectedTechnician: _filterTechnician,
        selectedClient: _filterClient,
        onFiltersApplied: (filters) {
          setState(() {
            _filterTechnician = filters['technician'] ?? 'all';
            _filterClient = filters['client'] ?? 'all';
            // Aplicar filtros a la lista de mantenimientos
            _applyFilters(filters);
          });
        },
      ),
    );
  }

  void _applyFilters(Map<String, dynamic> filters) {
    // Filtrar la lista de mantenimientos basada en los filtros aplicados
    List<MaintenanceSchedule> filteredMaintenances = List.from(_allMaintenances);

    // Filtro por t√©cnico
    if (filters['technician'] != 'all' && filters['technician'] != null) {
      filteredMaintenances = filteredMaintenances
          .where((m) => m.technicianId == filters['technician'])
          .toList();
    }

    // Filtro por cliente
    if (filters['client'] != 'all' && filters['client'] != null) {
      filteredMaintenances = filteredMaintenances
          .where((m) => m.clientId == filters['client'])
          .toList();
    }

    // Filtro por estado
    if (filters['status'] != null) {
      filteredMaintenances = filteredMaintenances
          .where((m) => m.status == filters['status'])
          .toList();
    }

    // Filtro por frecuencia
    if (filters['frequency'] != null) {
      filteredMaintenances = filteredMaintenances
          .where((m) => m.frequency == filters['frequency'])
          .toList();
    }

    // Filtro por rango de fechas
    if (filters['startDate'] != null) {
      filteredMaintenances = filteredMaintenances
          .where((m) => m.scheduledDate.isAfter(filters['startDate']))
          .toList();
    }

    if (filters['endDate'] != null) {
      filteredMaintenances = filteredMaintenances
          .where((m) => m.scheduledDate.isBefore(filters['endDate']))
          .toList();
    }

    // Actualizar los eventos del calendario
    _events.clear();
    for (var maintenance in filteredMaintenances) {
      final date = DateTime(
        maintenance.scheduledDate.year,
        maintenance.scheduledDate.month,
        maintenance.scheduledDate.day,
      );
      
      if (_events[date] != null) {
        _events[date]!.add(maintenance);
      } else {
        _events[date] = [maintenance];
      }
    }

    // Actualizar eventos seleccionados
    if (_selectedDay != null) {
      _selectedEvents.value = _getEventsForDay(_selectedDay!);
    }
  }

  void _showAddMaintenanceDialog() {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => const AddMaintenanceScreen(),
      ),
    ).then((value) {
      if (value == true) {
        // Recargar datos si se agreg√≥ un mantenimiento
        _loadMaintenances();
      }
    });
  }

  void _showMaintenanceDetails(MaintenanceSchedule maintenance) {
    // Mostrar un di√°logo simple hasta que tengas la pantalla de detalles
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(maintenance.equipmentName),
        content: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              _buildDetailRow('Cliente', maintenance.clientName),
              _buildDetailRow('Estado', maintenance.statusDisplayName),
              _buildDetailRow('Fecha', DateFormat('dd/MM/yyyy HH:mm').format(maintenance.scheduledDate)),
              _buildDetailRow('Duraci√≥n', '${maintenance.estimatedDurationMinutes} minutos'),
              if (maintenance.technicianName != null)
                _buildDetailRow('T√©cnico', maintenance.technicianName!),
              if (maintenance.location != null)
                _buildDetailRow('Ubicaci√≥n', maintenance.location!),
              if (maintenance.notes != null)
                _buildDetailRow('Notas', maintenance.notes!),
              if (maintenance.tasks.isNotEmpty) ...[
                const SizedBox(height: 8),
                const Text('Tareas:', style: TextStyle(fontWeight: FontWeight.bold)),
                ...maintenance.tasks.map((task) => Text('‚Ä¢ $task')),
              ],
            ],
          ),
        ),
        actions: [
          if (maintenance.status == MaintenanceStatus.scheduled)
            TextButton(
              onPressed: () {
                Navigator.pop(context);
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => AddMaintenanceScreen(maintenance: maintenance),
                  ),
                ).then((value) {
                  if (value == true) {
                    _loadMaintenances();
                  }
                });
              },
              child: const Text('Editar'),
            ),
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cerrar'),
          ),
        ],
      ),
    );
  }

  Widget _buildDetailRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 2),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 80,
            child: Text(
              '$label:',
              style: const TextStyle(fontWeight: FontWeight.w500),
            ),
          ),
          Expanded(child: Text(value)),
        ],
      ),
    );
  }

  // M√©todo para generar datos de ejemplo - CORREGIDO
  List<MaintenanceSchedule> _generateSampleMaintenances() {
    final now = DateTime.now()
    print('üîç Current year: ${now.year}');
    print('üîç Current month: ${now.month}');
  
  // Forzar fechas para 2025 septiembre ya que el calendario est√° ah√≠
    final day18 = DateTime(2025, 9, 18, 17, 3); 
    print('üîç Created event for: $day18');
    
    return [
      MaintenanceSchedule(
        id: '1',
        equipmentId: 'eq1',
        equipmentName: 'Split Recepci√≥n Principal',
        clientId: 'client1',
        clientName: 'Xpertcode',
        technicianId: 'tech1',
        technicianName: 'Francisco Severino',
        scheduledDate: day18, // Espec√≠ficamente el d√≠a 18
        status: MaintenanceStatus.completed,
        type: MaintenanceType.preventive,
        frequency: FrequencyType.monthly,
        tasks: ['Limpieza de filtros', 'Revisi√≥n de gas refrigerante'],
        estimatedDurationMinutes: 90,
        photoUrls: [],
        createdAt: now,
        updatedAt: now,
        createdBy: 'admin',
        location: 'Recepci√≥n - Pared Norte',
        notes: 'Mantenimiento completado exitosamente. Filtros cambiados.',
      ),
      MaintenanceSchedule(
        id: '2',
        equipmentId: 'eq2',
        equipmentName: 'Aire Nuevo',
        clientId: 'client1',
        clientName: 'Xpertcode',
        scheduledDate: day19,
        status: MaintenanceStatus.scheduled,
        type: MaintenanceType.preventive,
        frequency: FrequencyType.monthly,
        tasks: ['Inspecci√≥n general', 'Limpieza'],
        estimatedDurationMinutes: 60,
        photoUrls: [],
        createdAt: now,
        updatedAt: now,
        createdBy: 'admin',
        location: 'Oficina 1',
        technicianName: 'Juan T√©cnico',
      ),
      MaintenanceSchedule(
        id: '3',
        equipmentId: 'eq3',
        equipmentName: 'Sistema Central',
        clientId: 'client2',
        clientName: 'Empresa Demo',
        scheduledDate: day22,
        status: MaintenanceStatus.inProgress,
        type: MaintenanceType.preventive,
        frequency: FrequencyType.monthly,
        tasks: ['Mantenimiento completo', 'Revisi√≥n el√©ctrica'],
        estimatedDurationMinutes: 120,
        photoUrls: [],
        createdAt: now,
        updatedAt: now,
        createdBy: 'admin',
        location: 'Planta Baja',
        technicianName: 'Carlos T√©cnico',
        notes: 'Requiere piezas especiales',
      ),
    ];
  }

  Future<void> _generateDayReport(List<MaintenanceSchedule> maintenances) async {
    try {
      // Mostrar loading
      showDialog(
        context: context,
        barrierDismissible: false,
        builder: (context) => const Center(
          child: CircularProgressIndicator(),
        ),
      );

      final pdf = pw.Document();

      // Fecha del reporte
      final reportDate = _selectedDay ?? DateTime.now();
      final dateString = DateFormat('dd/MM/yyyy', 'es').format(reportDate);
      final dayString = DateFormat('EEEE', 'es').format(reportDate);

      // Calcular estad√≠sticas
      final completedCount = maintenances.where((m) => m.status == MaintenanceStatus.completed).length;
      final inProgressCount = maintenances.where((m) => m.status == MaintenanceStatus.inProgress).length;
      final scheduledCount = maintenances.where((m) => m.status == MaintenanceStatus.scheduled).length;
      
      final totalEstimatedTime = maintenances.fold<int>(
        0, (sum, m) => sum + m.estimatedDurationMinutes
      );

      // Crear p√°gina del PDF
      pdf.addPage(
        pw.MultiPage(
          pageFormat: PdfPageFormat.a4,
          margin: const pw.EdgeInsets.all(32),
          build: (context) {
            return [
              // Header
              _buildPdfHeader(dayString, dateString),
              pw.SizedBox(height: 20),
              
              // Resumen estad√≠stico
              _buildPdfSummary(
                maintenances.length,
                completedCount,
                inProgressCount,
                scheduledCount,
                totalEstimatedTime,
              ),
              pw.SizedBox(height: 30),
              
              // Lista detallada de mantenimientos
              _buildPdfMaintenancesList(maintenances),
            ];
          },
        ),
      );

      // Cerrar loading
      Navigator.pop(context);

      // Mostrar el PDF
      await Printing.layoutPdf(
        onLayout: (format) async => pdf.save(),
        name: 'Reporte_Mantenimientos_$dateString.pdf',
      );

    } catch (e) {
      // Cerrar loading si est√° abierto
      if (Navigator.canPop(context)) {
        Navigator.pop(context);
      }
      
      // Mostrar error
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Error generando reporte: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  // Header del PDF
  pw.Widget _buildPdfHeader(String dayString, String dateString) {
    return pw.Row(
      mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
      children: [
        pw.Column(
          crossAxisAlignment: pw.CrossAxisAlignment.start,
          children: [
            pw.Text(
              'PM MONITOR',
              style: pw.TextStyle(
                fontSize: 24,
                fontWeight: pw.FontWeight.bold,
                color: PdfColors.blue700,
              ),
            ),
            pw.Text(
              'Reporte de Mantenimientos',
              style: pw.TextStyle(fontSize: 16),
            ),
            pw.SizedBox(height: 8),
            pw.Text(
              '$dayString, $dateString',
              style: pw.TextStyle(
                fontSize: 18,
                fontWeight: pw.FontWeight.bold,
              ),
            ),
          ],
        ),
        pw.Column(
          crossAxisAlignment: pw.CrossAxisAlignment.end,
          children: [
            pw.Text(
              'Generado el:',
              style: pw.TextStyle(fontSize: 10, color: PdfColors.grey600),
            ),
            pw.Text(
              DateFormat('dd/MM/yyyy HH:mm').format(DateTime.now()),
              style: pw.TextStyle(fontSize: 12),
            ),
          ],
        ),
      ],
    );
  }

  // Resumen estad√≠stico
  pw.Widget _buildPdfSummary(
    int total,
    int completed,
    int inProgress,
    int scheduled,
    int totalTime,
  ) {
    return pw.Container(
      padding: const pw.EdgeInsets.all(16),
      decoration: pw.BoxDecoration(
        border: pw.Border.all(color: PdfColors.grey400),
        borderRadius: pw.BorderRadius.circular(8),
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Text(
            'Resumen del D√≠a',
            style: pw.TextStyle(
              fontSize: 16,
              fontWeight: pw.FontWeight.bold,
              color: PdfColors.blue700,
            ),
          ),
          pw.SizedBox(height: 12),
          pw.Row(
            mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
            children: [
              _buildSummaryCard('Total', total.toString(), PdfColors.blue),
              _buildSummaryCard('Completados', completed.toString(), PdfColors.green),
              _buildSummaryCard('En Progreso', inProgress.toString(), PdfColors.orange),
              _buildSummaryCard('Programados', scheduled.toString(), PdfColors.grey),
            ],
          ),
          pw.SizedBox(height: 12),
          pw.Row(
            children: [
              pw.Text(
                '‚è∞ Tiempo total estimado: ${(totalTime / 60).toStringAsFixed(1)} horas',
                style: pw.TextStyle(fontSize: 12),
              ),
            ],
          ),
        ],
      ),
    );
  }

  // Tarjeta de resumen
  pw.Widget _buildSummaryCard(String title, String value, PdfColor color) {
    return pw.Container(
      width: 100,
      padding: const pw.EdgeInsets.all(12),
      decoration: pw.BoxDecoration(
        color: color.shade(0.1),
        borderRadius: pw.BorderRadius.circular(8),
      ),
      child: pw.Column(
        children: [
          pw.Text(
            value,
            style: pw.TextStyle(
              fontSize: 24,
              fontWeight: pw.FontWeight.bold,
              color: color,
            ),
          ),
          pw.Text(
            title,
            style: pw.TextStyle(
              fontSize: 10,
              color: PdfColors.grey700,
            ),
          ),
        ],
      ),
    );
  }

  // Lista detallada de mantenimientos
  pw.Widget _buildPdfMaintenancesList(List<MaintenanceSchedule> maintenances) {
    return pw.Column(
      crossAxisAlignment: pw.CrossAxisAlignment.start,
      children: [
        pw.Text(
          'Detalle de Mantenimientos',
          style: pw.TextStyle(
            fontSize: 16,
            fontWeight: pw.FontWeight.bold,
            color: PdfColors.blue700,
          ),
        ),
        pw.SizedBox(height: 16),
        
        // Tabla de mantenimientos
        pw.Table(
          border: pw.TableBorder.all(color: PdfColors.grey400),
          columnWidths: {
            0: const pw.FlexColumnWidth(2), // Equipo
            1: const pw.FlexColumnWidth(1.5), // Cliente
            2: const pw.FlexColumnWidth(1), // Hora
            3: const pw.FlexColumnWidth(1.5), // T√©cnico
            4: const pw.FlexColumnWidth(1), // Estado
            5: const pw.FlexColumnWidth(1), // Duraci√≥n
          },
          children: [
            // Header
            pw.TableRow(
              decoration: pw.BoxDecoration(color: PdfColors.grey200),
              children: [
                _buildTableHeader('Equipo'),
                _buildTableHeader('Cliente'),
                _buildTableHeader('Hora'),
                _buildTableHeader('T√©cnico'),
                _buildTableHeader('Estado'),
                _buildTableHeader('Duraci√≥n'),
              ],
            ),
            
            // Filas de datos
            ...maintenances.map((maintenance) => pw.TableRow(
              children: [
                _buildTableCell(maintenance.equipmentName),
                _buildTableCell(maintenance.clientName),
                _buildTableCell(DateFormat('HH:mm').format(maintenance.scheduledDate)),
                _buildTableCell(maintenance.technicianName ?? 'No asignado'),
                _buildTableCell(maintenance.statusDisplayName),
                _buildTableCell('${maintenance.estimatedDurationMinutes} min'),
              ],
            )),
          ],
        ),
        
        pw.SizedBox(height: 20),
        
        // Secci√≥n de notas y observaciones
        if (maintenances.any((m) => m.notes != null && m.notes!.isNotEmpty))
          _buildNotesSection(maintenances),
      ],
    );
  }

  // Header de tabla
  pw.Widget _buildTableHeader(String text) {
    return pw.Padding(
      padding: const pw.EdgeInsets.all(8),
      child: pw.Text(
        text,
        style: pw.TextStyle(
          fontWeight: pw.FontWeight.bold,
          fontSize: 10,
        ),
      ),
    );
  }

  // Celda de tabla
  pw.Widget _buildTableCell(String text) {
    return pw.Padding(
      padding: const pw.EdgeInsets.all(8),
      child: pw.Text(
        text,
        style: pw.TextStyle(fontSize: 9),
      ),
    );
  }

  // Secci√≥n de notas
  pw.Widget _buildNotesSection(List<MaintenanceSchedule> maintenances) {
    final maintenancesWithNotes = maintenances
        .where((m) => m.notes != null && m.notes!.isNotEmpty)
        .toList();

    return pw.Column(
      crossAxisAlignment: pw.CrossAxisAlignment.start,
      children: [
        pw.Text(
          'Notas y Observaciones',
          style: pw.TextStyle(
            fontSize: 14,
            fontWeight: pw.FontWeight.bold,
            color: PdfColors.blue700,
          ),
        ),
        pw.SizedBox(height: 8),
        ...maintenancesWithNotes.map((maintenance) => pw.Padding(
          padding: const pw.EdgeInsets.only(bottom: 8),
          child: pw.Row(
            crossAxisAlignment: pw.CrossAxisAlignment.start,
            children: [
              pw.SizedBox(
                width: 120,
                child: pw.Text(
                  '${maintenance.equipmentName}:',
                  style: pw.TextStyle(
                    fontWeight: pw.FontWeight.bold,
                    fontSize: 10,
                  ),
                ),
              ),
              pw.Expanded(
                child: pw.Text(
                  maintenance.notes!,
                  style: pw.TextStyle(fontSize: 10),
                ),
              ),
            ],
          ),
        )),
      ],
    );
  }
}